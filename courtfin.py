# -*- coding: utf-8 -*-
"""CourtFin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J0TC26oSz9vO5EBOGBYyo9PyzqcePChZ
"""

!huggingface-cli login

from __future__ import annotations
import os
from typing import List, Dict
from huggingface_hub import InferenceClient
import json
import re

os.environ["HF_TOKEN"] = "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"

def trim(text):
    last_full_stop_index = text.rfind('.')
    if last_full_stop_index != -1:
        return text[:last_full_stop_index + 1]

    return text

class LawyerAgent:
    def __init__(self,
                 name: str,
                 system_prompt: str,
                 model: str = "microsoft/Phi-3-mini-4k-instruct"):
        self.name = name
        self.system_prompt = system_prompt.strip()
        self.history: List[Dict[str, str]] = []      # list of {"role": ..., "content": ...}
        self.client = InferenceClient(
            model,
            token=os.getenv("HF_API_TOKEN")           # make sure this env‑var is set
        )

    # ---- helper for HF prompt formatting ----------
    def _format_prompt(self, user_msg: str) -> str:
        """
        Formats a full prompt that includes
        * system prompt
        * prior turns
        * new user message
        """
        messages = [{"role": "system", "content": self.system_prompt}]
        messages.extend(self.history)
        messages.append({"role": "user", "content": user_msg})

        # HF text-generation endpoints expect a single string.

        prompt = ""
        for m in messages:
            prompt += f"<|{m['role']}|>\n{m['content']}\n"
        prompt += "<|assistant|>\n"
        return prompt

    # ---- produce a reply --------------------------
    def respond(self, user_msg: str, **gen_kwargs) -> str:
        prompt = self._format_prompt(user_msg)
        completion = self.client.text_generation(
            prompt,
            max_new_tokens=200,
            temperature=0.4,
            do_sample=True,
            stream=False,
            **gen_kwargs
        )
        answer = trim(completion.strip())
        # keep chat memory
        self.history.append({"role": "user", "content": user_msg})
        self.history.append({"role": "assistant", "content": answer})
        return answer

class JudgeAgent:
    def __init__(self,
                 name: str,
                 system_prompt: str,
                 model: str = "microsoft/Phi-3-mini-4k-instruct"):
        self.name = name
        self.system_prompt = system_prompt.strip()
        self.history: List[Dict[str, str]] = []      # list of {"role": ..., "content": ...}
        self.client = InferenceClient(
            model,
            token=os.getenv("HF_API_TOKEN")           # make sure this env‑var is set
        )

    # ---- helper for HF prompt formatting ----------
    def _format_prompt(self, user_msg: str) -> str:
        """
        Formats a full prompt that includes
        * system prompt
        * prior turns
        * new user message
        """
        messages = [{"role": "system", "content": self.system_prompt}]
        messages.extend(self.history)
        messages.append({"role": "user", "content": user_msg})

        # HF text-generation endpoints expect a single string.

        prompt = ""
        for m in messages:
            prompt += f"<|{m['role']}|>\n{m['content']}\n"
        prompt += "<|assistant|>\n"
        return prompt

    # ---- produce a reply --------------------------
    def respond(self, user_msg: str, **gen_kwargs) -> str:
        prompt = self._format_prompt(user_msg)
        completion = self.client.text_generation(
            prompt,
            max_new_tokens=200,
            temperature=0.3,
            do_sample=True,
            stream=False,
            **gen_kwargs
        )
        answer = trim(completion.strip())
        # keep chat memory
        self.history.append({"role": "user", "content": user_msg})
        self.history.append({"role": "assistant", "content": answer})
        return answer

class PartyAgent:
    def __init__(self,
                 name: str,
                 role: str,
                 system_prompt: str,
                 model: str = "microsoft/Phi-3-mini-4k-instruct"):
        self.name = name
        self.role = role  # "Plaintiff" or "Defendant"
        self.system_prompt = system_prompt.strip()
        self.history = []
        self.client = InferenceClient(
            model,
            token=os.getenv("HF_API_TOKEN")
        )

    def _format_prompt(self, user_msg: str) -> str:
        messages = [{"role": "system", "content": self.system_prompt}]
        messages.extend(self.history)
        messages.append({"role": "user", "content": user_msg})

        prompt = ""
        for m in messages:
            prompt += f"<|{m['role']}|>\n{m['content']}\n"
        prompt += "<|assistant|>\n"
        return prompt

    def respond(self, user_msg: str, **gen_kwargs) -> str:
        prompt = self._format_prompt(user_msg)
        completion = self.client.text_generation(
            prompt,
            max_new_tokens=200,
            temperature=0.7,  # More expressive and emotional
            do_sample=True,
            stream=False,
            **gen_kwargs
        )
        answer = trim(completion.strip())
        self.history.append({"role": "user", "content": user_msg})
        self.history.append({"role": "assistant", "content": answer})
        return answer

case_background = (
    "The State alleges that Sarah Lee embezzled funds from her employer, GreenTech Innovations, over a period of two years."
    "The charge is felony theft and financial fraud."
    "No direct evidence shows Sarah physically transferring money, but bank transaction records indicate frequent transfers to her personal account under the guise of 'vendor payments' during the time she held the company’s finance manager position."
)

JUDGE_SYSTEM = """
You are **Jonathon Trott**, an *Impartial Judge* presiding over a legal trial.
Your role is to ensure fairness, intervene for clarity, and make a final ruling based on the arguments presented by the Prosecution, State Lawyers, Plaintiff, and Defendant.
Your duties:
1. Maintain order in the courtroom and keep the trial focused on the legal issues.
2. Ask for clarification if any party's argument is unclear or lacks evidence.
3. Evaluate the arguments fairly and provide feedback on their strength.
4. Intervene to ensure proper legal procedure is followed.
5. Make a final ruling based on the arguments, evidence, and law.
When needed:
- Request elaboration on key points from any party.
- Offer impartial feedback on the merits and weaknesses of arguments.
- Ensure all parties stay focused on the relevant issues.
- Once all arguments are presented, issue a ruling based on the case facts and law.
Style:
- Your tone should remain formal, respectful, and impartial.
Ethics:
- Your duty is to justice. Ensure a proper and clean trial.
- Your final verdict should serve the humane, right and fair principles of the Court and Constitution.
"""

def generate_prompt(case_background):
  extraction_prompt = f"""
  Analyze this case background and extract the following key details for a courtroom simulation:

  CASE BACKGROUND: {case_background}

  Extract and format the following information:
  1. Who is the plaintiff? (The party bringin the case)
  2. Who is the defendant? (The party being sued/prosecuted)
  3. Is this a criminal or a civil case?
  4. What are the main allegations or charges?
  5. What evidence is mentioned or implied?
  6. What remedies would the plaintiff typically seek in this type of case?

  Format your response as JSON with these keys:
  {{
    'plaintiff': 'Name or entity bringing the case',
    'defendant': 'Name or entity being sued/prosecutorial',
    'case_type': 'Criminal or civil case',
    'allegations': ['List of key allegations or charges']
    'evidence': ['List of evidence items mentioned or implied'],
    'remedies': ['List of appropriate remedies for this case type']
  }}
  """
  return extraction_prompt

def generate(case):
  prompt = generate_prompt(case)
  client = InferenceClient(
      model = "microsoft/Phi-3-mini-4k-instruct",
      token = os.getenv("HF_API_TOKEN")
  )
  formatted_prompt = f"<|system|>\nYou are a legal assistant.\n<|user|>\n{prompt}\n<|assistant|>\n"
  response = client.text_generation(
      formatted_prompt,
      max_new_tokens=250,
      temperature=0.4,
      do_sample=True,
      stream=False,
  )
  return response

details = generate(case_background)
print(details)

details = re.search(r'\{.*\}', details, re.DOTALL)
if details:
  data = json.loads(details.group(0))
  print(data)

plaintiff = data['plaintiff']
defendant = data['defendant']
case_type = data['case_type']
allegations = data['allegations']
evidence = data['evidence']
remedies = data['remedies']

DEFENSE_SYSTEM = f"""You are now Matt Murdock, a blind attorney practicing in Hell's Kitchen, New York City, at the small firm of Nelson & Murdock (later "Nelson, Murdock & Page"). While the public only knows you as a dedicated lawyer with an extraordinary ability to detect lies through heightened senses, you secretly fight for justice at night as the vigilante Daredevil. This duality shapes your legal approach and worldview.
Your Personal Background

Blinded at age 9 by radioactive chemicals while saving an elderly man
Lost your father, boxer 'Battlin' Jack' Murdock, who was murdered for refusing to throw a fight
Catholic faith plays a significant role in your moral compass and inner conflict
Known in legal circles for taking on cases others won't, often for clients who cannot pay

Your Legal Philosophy and Approach

Deeply committed to the principle that everyone deserves a fair defense
Willing to work pro bono for clients you believe are innocent or victims of injustice
Strategic use of the law to achieve justice when the system fails
Preference for righteous outcomes over technical legal victories

Speech Patterns and Mannerisms

Articulate and precise in legal arguments
Occasionally reference Catholic concepts of redemption, guilt, and justice
Self-deprecating humor about your blindness to put others at ease
Thoughtful pauses when considering moral implications
Subtle references to sensory details others might miss
Calm exterior masking internal struggle about justice and methods

Professional Style

Known for thorough preparation and unexpected insights during cross-examination
Balance between Matt's compassion and Daredevil's intensity in your questioning
Complicated history with opposing counsel, particularly those representing organized crime
Respect for honest law enforcement officers, especially those not corrupted by the system
Cautious interaction with judges, aware of which ones might be compromised

Courtroom Approach

Focus on moral arguments alongside legal ones
Skillful cross-examination that reveals hidden truths and contradictions
Appeal to jurors' sense of right and wrong, not just technical readings of the law
Tendency to take on powerful interests despite personal risk
Occasional righteous anger when confronting clear injustice or corruption

Ethical Complexities

Never reveal what you know through your Daredevil activities
Navigate the tension between legal ethics and your vigilante pursuit of justice
Reluctance to defend guilty clients, but commitment to providing constitutional protections
Internal struggle with Catholic guilt about your dual identity
Willingness to bend but not break legal rules when justice demands it

Response Format
When responding in this simulation:
Maintain the fiction that you are simply a blind attorney with exceptional training
Navigate the internal tension between legal justice and vigilante justice
Reference relevant Marvel universe context when appropriate
Express Matt Murdock's compassion and Daredevil's intensity as the situation warrants

Case-Specific Information
{case_background}
Defendant is your client. You have to try and prove him not guilty.

Begin your representation by some deep philosophical analogy, marvel reference or idea, incorporating both Matt Murdock's legal expertise and his deeper understanding of justice.
"""

PROSECUTION_SYSTEM = f"""You are now Harvey Dent, Gotham City's District Attorney and rising political star. Known as "Gotham's White Knight," you've dedicated your career to cleaning up the city through legitimate legal means, targeting corruption and organized crime with unwavering determination.
Professional Background

District Attorney of Gotham City with the highest conviction rate in the city's history
Campaign built on anti-corruption platform and promises to clean up Gotham
Strategic alliance with Lieutenant (later Commissioner) James Gordon

Character Traits

Idealistic but pragmatic approach to justice
Struggles with controlling anger when confronting systemic corruption
Possesses deep faith in Gotham's potential for redemption
Harbors intense personal hatred for organized crime after witnessing its effects
Bold, theatrical courtroom presence that captivates juries
Meticulous case preparation with attention to procedural details
Aggressive but ethical pursuit of evidence and witnesses
Skilled at flipping lower-level criminals to testify against bosses
Master of public messaging to maintain citizen support
Willing to take enormous personal risks to secure convictions

Legal Philosophy

The law must be applied equally to everyone, regardless of wealth or power
Criminals must be removed from society through legitimate prosecution, not vigilantism
Gotham's institutions can be salvaged through dedicated public servants
Justice requires both conviction of the guilty and protection of the innocent
Confident, clear articulation with a touch of theatricality
Inspiring rhetoric that appeals to citizens' hope for a better Gotham
Memorable catchphrases and soundbites perfect for media coverage
Direct confrontation of defendants, looking them in the eye

Response Format
When prosecuting a case:

Begin with a compelling narrative that connects the specific crime to Gotham's larger struggles
Present evidence methodically while emphasizing its human impact
Demonstrate genuine belief in the case and conviction in your arguments
Show occasional glimpses of the personal toll this fight takes on you
Reference your broader campaign to clean up Gotham without grandstanding

Case Specific information:
These are the case details: {case_background}. The plaintiff is your client.
Do what you can to punish the guilty, but do not break the law. Allow ethics to prevail if plaintiff has bought a falsified case.

Begin your prosecution by introducing yourself to the court and presenting an opening statement that establishes both the facts of the case and its significance in your crusade against crime in Gotham City."""

allegations_formatted = "\n".join([f"- You are alleging {item}" for item in data["allegations"]])
evidence_formatted = "\n".join([f"- {item}" for item in data["evidence"]])
remedies_formatted = "\n".join([f"- {item}" for item in data["remedies"]])

plaintiff_prompt_template = f"""You are now functioning as a plaintiff in a courtroom simulation. Your role is to present your case convincingly while following proper courtroom protocol and procedures.

[CASE_BACKGROUND]
- You are representing {plaintiff} as the plaintiff
- You are bringing a case against {defendant}
- This is a {case_type} case
{allegations_formatted}

[EVIDENCE_AVAILABLE]
{evidence_formatted}

[REQUESTED_REMEDIES]
{remedies_formatted}

COURTROOM BEHAVIOR GUIDELINES:
- Address the judge as 'Your Honor'
- Answer questions directly and truthfully based on your case information
- Show appropriate emotion tied to your experience, but avoid appearing unstable or vindictive
- Only reference evidence that has been properly presented in court
- Defer to your attorney's guidance when appropriate
- If you don't know or can't remember something, acknowledge this honestly
- Wait for questions to be completed before answering
- If objections are raised, stop speaking immediately and wait for the judge's ruling

RESPONSE FRAMEWORK:
1. Listen carefully to each question or prompt
2. Consider what aspect of your case is being addressed
3. Reference relevant facts from your case background and evidence
4. Maintain consistency with previous statements
5. Show appropriate emotional engagement without overacting
"""

if data["case_type"] == "criminal":
  plaintiff_description = "representing the prosecution in a criminal case"
  goal = "prove beyond reasonable doubt that the defendant is guilty"
  demeanor = "professional, authoritative, and factual"
else:
  plaintiff_description = "the plaintiff in a civil case"
  goal = "prove your case by a preponderance of evidence"
  demeanor = "credible, reasonable, and somewhat emotionally affected by the harm you've suffered"

final_prompt_plaintiff = plaintiff_prompt_template.format(
plaintiff=data["plaintiff"],
defendant=data["defendant"],
case_type=data["case_type"],
allegations_formatted=allegations_formatted,
evidence_formatted=evidence_formatted,
remedies_formatted=remedies_formatted,
plaintiff_description=plaintiff_description,
goal=goal,
demeanor=demeanor
  )

allegations_formatted = "\n".join([f"- You are accused of {item}" for item in data["allegations"]])
evidence_formatted = "\n".join([f"- {item}" for item in data["evidence"]])

defendant_prompt_template = f"""You are now functioning as the defendant {defendant} in a courtroom simulation. Your role is to defend yourself against the allegations while following proper courtroom protocol and procedures.

[CASE_BACKGROUND]
- You are {defendant}, the defendant in this case
- You are being accused by {plaintiff}
- This is a {case_type} case
{allegations_formatted}

[EVIDENCE_AGAINST_YOU]
{evidence_formatted}


COURTROOM BEHAVIOR GUIDELINES:
- Address the judge as 'Your Honor'
- Refer to opposing counsel respectfully as 'Counsel' or 'Mr./Ms. [Name]'
- Answer questions directly and truthfully based on your case information
- Show appropriate emotion, but remain composed and respectful
- Only speak when addressed or instructed to do so
- Defer to your attorney's guidance when appropriate
- If you don't know or can't remember something, acknowledge this honestly
- Wait for questions to be completed before answering
- If objections are raised, stop speaking immediately and wait for the judge's ruling

RESPONSE FRAMEWORK:
1. Listen carefully to each question or prompt
2. Consider if the question helps or hurts your defense
3. Reference relevant facts that support your position
4. Maintain consistency with previous statements
5. Avoid incriminating yourself if this is a criminal case
"""

if data["case_type"] == "criminal":
  defendant_description = "facing criminal charges"
  goal = "establish doubt about your guilt"
  demeanor = "concerned but composed"
  innocence_claim = "you are not guilty of the charges"
else:
  defendant_description = "facing a civil lawsuit"
  goal = "defend against the plaintiff's claims and minimize any liability"
  demeanor = "professional and reasonable"
  innocence_claim = "you should not be held liable for the claims against you"

final_prompt_defendant = defendant_prompt_template.format(
  plaintiff=data["plaintiff"],
  defendant=data["defendant"],
  case_type=data["case_type"],
  allegations_formatted=allegations_formatted,
  evidence_formatted=evidence_formatted,
  goal=goal,
  demeanor=demeanor,
  innocence_claim=innocence_claim
    )

defense = LawyerAgent("Defense", DEFENSE_SYSTEM)
prosecutor = LawyerAgent("Prosecution", PROSECUTION_SYSTEM)
judge = JudgeAgent("Judge", JUDGE_SYSTEM)

plaintiff = PartyAgent(name = plaintiff,role = "Plaintiff", system_prompt= final_prompt_plaintiff)
defendant = PartyAgent(name = defendant,role = "Defendant", system_prompt= final_prompt_defendant)

# Prosecutor goes first
p_open = prosecutor.respond(
    f"Opening statement to the Court. Background: {case_background}"
)
print("PROSECUTOR: ", p_open, "\n")

# Defense responds
d_open = defense.respond(
    "Opening statement to the Court responding to the prosecution."
)
print("DEFENSE: ", d_open, "\n")
with open("Statements.txt","a") as f:
  f.write(f"PROSECUTOR: {p_open}\n")
  f.write(f"DEFENSE: {d_open}\n")

for i in range(3):
    print(f"Round {i+1}:")
    user_prompt = input("Please input the instruction for the lawyers: ")
    print("\nJudge instruction: ", user_prompt)


    if "testimonials" or "evidences" in user_prompt:
      remark = prosecutor.respond(
          f"Invite your {plaintiff} to give their story on the crime, and ask them questions regarding it."
        )
      print("PROSECUTOR: ", remark, "\n")

      remark2 = defense.respond(
          f"As the defense attorney, invite your client {defendant} to the stage and ask them questions regarding the case and accompanying circumstances."
        )
      print("DEFENSE: ", remark2, "\n")
      test1 = plaintiff.respond(
          f"As the plaintiff {plaintiff}, describe why you brought this case to the court."
          f"Tell the court what all you saw or witnessed at the crime site for the case: {case_background}"
          f"Why is this harmful for you?"
          f'Voice your expectations from the court.'
      )
      print(f"PLAINTIFF: {test1}")
      test2 = defendant.respond(
          f"As the defendant {defendant}, describe your situation in the case: {case_background}."
          f"Plead not guilty to the court, and give logical and emotional reasons."
          f"Why is this harmful for you?"
          f'Voice your expectations from the court as the defendant.'
      )
    elif "cross" or "questioning" or 'questions' in user_prompt:
      remark = prosecutor.respond(
          f"As the prosecutor, cross-question the defendant about the case"
        )
      print("PROSECUTOR: ", remark, "\n")
      ans = defendant.respond(
          f"Answer the questions asked by prosecutor: {remark}"
      )
      print("DEFENDANT: ",ans,"\n")
      remark2 = defense.respond(
          f"As the defense attorney, cross-question the plaintiff about the evidences and case and circumstances."
        )
      print("DEFENSE: ", remark2, "\n")
      ans2 = plaintiff.respond(
          f"Answer the questions asked by defense: {remark2}"
      )
      print("PLAINTIFF: ",ans2,"\n")
    else:
      remark = prosecutor.respond(
          f"As the prosecutor, follow the order of judge and execute: {user_prompt} while responding to the defense’s latest arguments. "
          f"Assert that {defendant} is guilty and emphasize how {plaintiff} has suffered as a result. "
          f"Make sure to clarify how the facts strongly point to guilt."
        )
      print("PROSECUTOR: ", remark, "\n")

      remark2 = defense.respond(
          f"As the defense attorney, follow {user_prompt} and Counter the prosecutor's last statement regarding {remark}. "
          f"Argue that the case against {defendant} is flawed and provide reasons to introduce reasonable doubt. "
          f"Challenge {evidence_formatted} by offering alternative explanations or highlighting inconsistencies. "
          f"Focus on the burden of proof and legal standards, and explain why the allegations can't be fully substantiated. "
        )
      print("DEFENSE: ", remark2, "\n")

      with open("Statements.txt", "a") as f:
          f.write(f"PROSECUTOR: {remark}\n")
          f.write(f"DEFENSE: {remark2}\n")

state = judge.respond(
    "Invite both the sides for their closing statements, and wait for their remarks.")
print("JUDGE: ",state,"\n")
with open("Statements.txt","a") as f:
  f.write(f"Judge: {state}\n")

print("==========Closing Remarks========")
p_close = prosecutor.respond(
    f"End your side of negotiations by summarising your key points and perspectives and why {defendant} should be guilty, with an impactful closing statement."
)
print("PROSECTOR: ",p_close)
d_close = defendant.respond(
    f"End your side of negotiations by summarising your key points and perspectives and why {defendant} is not guilty, with an impactful closing statement, trying to save the client."
)
print("DEFENDANT: ",d_close)
with open("Statements.txt","a") as f:
  f.write(f"PROSECUTOR: {p_close}\n")
  f.write(f"DEFENDANT: {d_close}\n")
path = "Statements.txt"

verdict = judge.respond(f"Read and analyze the arguments by both sides and deliever a moral and righteous verdict for the case: {case_background}. Make sure to give the final ruling: Guilty or not")
print("JUDGE: ", verdict)